// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/unkeyed/unkey-go/internal/utils"
)

type Or struct {
	Or []*PermissionQuery `json:"or"`
}

func (o *Or) GetOr() []*PermissionQuery {
	if o == nil {
		return []*PermissionQuery{}
	}
	return o.Or
}

type And struct {
	And []*PermissionQuery `json:"and"`
}

func (o *And) GetAnd() []*PermissionQuery {
	if o == nil {
		return []*PermissionQuery{}
	}
	return o.And
}

type PermissionQueryType string

const (
	PermissionQueryTypeStr PermissionQueryType = "str"
	PermissionQueryTypeAnd PermissionQueryType = "And"
	PermissionQueryTypeOr  PermissionQueryType = "Or"
)

// PermissionQuery - A query for which permissions you require
type PermissionQuery struct {
	Str *string `queryParam:"inline"`
	And *And    `queryParam:"inline"`
	Or  *Or     `queryParam:"inline"`

	Type PermissionQueryType
}

func CreatePermissionQueryStr(str string) PermissionQuery {
	typ := PermissionQueryTypeStr

	return PermissionQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreatePermissionQueryAnd(and And) PermissionQuery {
	typ := PermissionQueryTypeAnd

	return PermissionQuery{
		And:  &and,
		Type: typ,
	}
}

func CreatePermissionQueryOr(or Or) PermissionQuery {
	typ := PermissionQueryTypeOr

	return PermissionQuery{
		Or:   &or,
		Type: typ,
	}
}

func (u *PermissionQuery) UnmarshalJSON(data []byte) error {

	var and And = And{}
	if err := utils.UnmarshalJSON(data, &and, "", true, true); err == nil {
		u.And = &and
		u.Type = PermissionQueryTypeAnd
		return nil
	}

	var or Or = Or{}
	if err := utils.UnmarshalJSON(data, &or, "", true, true); err == nil {
		u.Or = &or
		u.Type = PermissionQueryTypeOr
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PermissionQueryTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PermissionQuery", string(data))
}

func (u PermissionQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.And != nil {
		return utils.MarshalJSON(u.And, "", true)
	}

	if u.Or != nil {
		return utils.MarshalJSON(u.Or, "", true)
	}

	return nil, errors.New("could not marshal union type PermissionQuery: all fields are null")
}
