// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/unkeyed/unkey-go/internal/utils"
	"github.com/unkeyed/unkey-go/models/components"
)

// Granularity - The granularity of the usage data to fetch, currently only `day` is supported
type Granularity string

const (
	GranularityDay Granularity = "day"
)

func (e Granularity) ToPointer() *Granularity {
	return &e
}
func (e *Granularity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		*e = Granularity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Granularity: %v", v)
	}
}

type KeysGetVerificationsRequest struct {
	KeyID   *string `queryParam:"style=form,explode=true,name=keyId"`
	OwnerID *string `queryParam:"style=form,explode=true,name=ownerId"`
	Start   *int64  `queryParam:"style=form,explode=true,name=start"`
	End     *int64  `queryParam:"style=form,explode=true,name=end"`
	// The granularity of the usage data to fetch, currently only `day` is supported
	Granularity *Granularity `default:"day" queryParam:"style=form,explode=true,name=granularity"`
}

func (k KeysGetVerificationsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KeysGetVerificationsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *KeysGetVerificationsRequest) GetKeyID() *string {
	if o == nil {
		return nil
	}
	return o.KeyID
}

func (o *KeysGetVerificationsRequest) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *KeysGetVerificationsRequest) GetStart() *int64 {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *KeysGetVerificationsRequest) GetEnd() *int64 {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *KeysGetVerificationsRequest) GetGranularity() *Granularity {
	if o == nil {
		return nil
	}
	return o.Granularity
}

type Verifications struct {
	// The timestamp of the usage data
	Time int64 `json:"time"`
	// The number of successful requests
	Success int64 `json:"success"`
	// The number of requests that were rate limited
	RateLimited int64 `json:"rateLimited"`
	// The number of requests that exceeded the usage limit
	UsageExceeded int64 `json:"usageExceeded"`
}

func (o *Verifications) GetTime() int64 {
	if o == nil {
		return 0
	}
	return o.Time
}

func (o *Verifications) GetSuccess() int64 {
	if o == nil {
		return 0
	}
	return o.Success
}

func (o *Verifications) GetRateLimited() int64 {
	if o == nil {
		return 0
	}
	return o.RateLimited
}

func (o *Verifications) GetUsageExceeded() int64 {
	if o == nil {
		return 0
	}
	return o.UsageExceeded
}

// KeysGetVerificationsResponseBody - Usage numbers over time
type KeysGetVerificationsResponseBody struct {
	Verifications []Verifications `json:"verifications"`
}

func (o *KeysGetVerificationsResponseBody) GetVerifications() []Verifications {
	if o == nil {
		return []Verifications{}
	}
	return o.Verifications
}

type KeysGetVerificationsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Usage numbers over time
	Object *KeysGetVerificationsResponseBody
}

func (o *KeysGetVerificationsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *KeysGetVerificationsResponse) GetObject() *KeysGetVerificationsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
